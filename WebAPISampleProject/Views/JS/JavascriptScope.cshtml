@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>JavascriptScope</title>
    <script>
        // a globally-scoped variable
        var a = 1;

        // global scope
        function one() {
            //alert(a);
            document.writeln(a);
        }

        // local scope
        function two(a) {
            document.writeln(a);
        }

        // local scope again
        function three() {
            var a = 3;
            document.writeln(a);
        }

        // Intermediate: no such thing as block scope in javascript
        function four() {
            if (true) {
                var a = 4;
            }

            document.writeln(a); // alerts '4', not the global value of '1'
        }


        // Intermediate: object properties
        function Five() {
            this.a = 5;
        }


        // Advanced: closure
        var six = function () {
            var foo = 6;

            return function () {
                // javascript "closure" means I have access to foo in here, 
                // because it is defined in the function in which I was defined.
                document.writeln(foo);
            }
        }()


        // Advanced: prototype-based scope resolution
        function Seven() {
            this.a = 7;
        }

        // [object].prototype.property loses to [object].property in the lookup chain
        Seven.prototype.a = -1; // won't get reached, because 'a' is set in the constructor above.
        Seven.prototype.b = 8; // Will get reached, even though 'b' is NOT set in the constructor.



        // These will print 1-8
        one();
        two(2);
        three();
        four();
        document.writeln(new Five().a);
        six();
        document.writeln(new Seven().a);
        document.writeln(new Seven().b);
    </script>
</head>
<body>
    <div>
        <b>Testing Javascript Scope</b>
    </div>
</body>
</html>
