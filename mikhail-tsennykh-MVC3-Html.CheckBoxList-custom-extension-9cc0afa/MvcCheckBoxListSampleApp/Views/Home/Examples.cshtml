@model MvcCheckBoxListSampleApp.ViewModels.CitiesViewModel
@{
    ViewBag.Title = "Examples";
}

@if (Model.WasPosted) {
	<div class="notice success clearfix">
    <div class="content_left margin_top13">
      <span class="icon medium" data-icon="C"></span>
    </div>
    <div class="content_left">
      <h4>
		    @if (Model.PostedCities.CityIDs != null) {
			    @string.Join(", ", Model.SelectedCities.Select(x => x.Name))
		    }
      </h4>
    </div>
	</div>
}
<div class="col_12">
<h3>@ViewBag.Title</h3>

<section>
	<title>Set name manually</title>
  <p>
	  <label>Output:</label>
	  @using (Html.BeginForm("Examples", "Home", FormMethod.Get)) {
		  <div class="margin_bottom10">
			  @Html.CheckBoxList("Cities",
													  x => x.AvailableCities,
													  x => x.Id,
													  x => x.Name,
													  x => x.SelectedCities)
		  </div>
		  <input class="green" type="submit" value="POST to controller" />
	  }
  </p>

  <p>
	  <label>Source Code:</label>
<pre>
&#64;Html.CheckBoxList("Cities",                // checkbox list name          
                   x => x.AvailableCities,  // all checkbox values         
                   x => x.Id,               // field from data source to be used for checkbox VALUE              
                   x => x.Name,             // field from data source to be used for checkbox TEXT              
                   x => x.SelectedCities)   // selected values (list of selected 'Cities' in our case),
                                            // must be of same data type as source data or set to 'NULL'
</pre>
  </p>			
</section>


<section>
	<title>Set name from view model</title>
  <p>
	  <label>Output:</label>
	  @using (Html.BeginForm("Examples", "Home", FormMethod.Get)) {
		  <div class="margin_bottom10">
			  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
														  x => x.AvailableCities,
														  x => x.Id,
														  x => x.Name,
														  x => x.SelectedCities)
		  </div>
		  <input class="green" type="submit" value="POST to controller" />
	  }
	</p>

  <p>
	  <label>Source Code:</label>
<pre>
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,  // checkbox list name, 'PostedCities.CityIDs' in this case
                      x => x.AvailableCities,          
                      x => x.Id,               
                      x => x.Name,               
                      x => x.SelectedCities)
</pre>
  </p>
</section>


<section>
	<title>Vertical Check Box List</title>
  <p>
	  <label>Output:</label>
	  @using (Html.BeginForm("Examples", "Home", FormMethod.Get)) {
		  <div class="margin_bottom10">
			  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
														  x => x.AvailableCities,
														  x => x.Id,
														  x => x.Name,
														  x => x.SelectedCities,
                              Position.Vertical)
		  </div>
		  <input class="green" type="submit" value="POST to controller" />
	  }
	</p>

  <p>
	  <label>Source Code:</label>
<pre>
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,  // checkbox list name, 'PostedCities.CityIDs' in this case
                      x => x.AvailableCities,          
                      x => x.Id,               
                      x => x.Name,               
                      x => x.SelectedCities,
                      Position.Vertical)
</pre>
  </p>
</section>


<section>
	<title>Custom HTML tags for individual checkboxes from Model (Database)</title>
  <p>
    <label>Output:</label><br/><br/>
	  <em>Some cities will have custom tags from database:</em>
	  <em>('<i>new {what = "smallCity"}</i>' for Monroe, and '<i>new {what = "bigCity"}</i>' for Moscow)</em>
	  @using (Html.BeginForm("Examples", "Home", FormMethod.Get)) {
		  <div class="custom_tags margin_bottom10">
			  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
														  x => x.AvailableCities,
														  x => x.Id,
														  x => x.Name,
														  x => x.SelectedCities,
														  x => x.Tags)
		  </div>
		  <input class="green" type="submit" value="POST to controller" />
	  }
  </p>

  <p>
	  <label>Source Code:</label><br/><br/>
	  <em>We have this jquery code which will apply to certain custom tags from db:</em>
<pre>
$('[what="smallCity"]').css("color", "blue");
$('[what="bigCity"]').css("color", "green");
</pre>
    <em>And we call the control like this:</em>
<pre class="cs">
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
                      x => x.AvailableCities,
                      x => x.Id,
                      x => x.Name,
                      x => x.SelectedCities,
                      x => x.Tags)            // Tags is a database/model field of type 'object'
                                              // with value similar to: 'new {tagName = "tagValue"}'
                                              // they will be merged with other tags and applied to checkbox and its label
</pre>
  </p>
</section>


<section>
	<title>Full Example</title>
	<p>
    <label>Output:</label>
	  @using (Html.BeginForm("Examples", "Home", FormMethod.Get)) {
      var htmlListInfo = new HtmlListInfo(HtmlTag.vertical_columns, 2, new {@class="styled_list"});
     
		  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
													  x => x.AvailableCities,
													  x => x.Id,
													  x => x.Name,
													  x => x.SelectedCities,
							              new { @class="styled_checkbox" },
													  htmlListInfo,
													  new[] {"3", "5", "7"},
							              x => x.Tags)

		  <p><input class="green" type="submit" value="POST to controller" /></p>
	  }
	</p>	

	<p>
    <label>Source Code:</label><br/><br/>
    <em>We have this style for each checkbox:</em>
<pre>
.styled_checkbox {
  background: wheat; cursor:pointer; border-radius:5px;
  margin: 3px; padding: 0px 5px;
}
</pre>
	  <em>Also we have this style for the list wrapper (applies to each column):</em>
<pre>
.styled_list {
  color:green; background:lightblue; border-radius:5px;
  margin-right: 15px; padding:3px 5px 3px 5px; line-height: 25px;
}
</pre>
	  <em>And we apply them below:</em>
<pre class="cs">
&#64;&#123;
  var htmlListInfo = new HtmlListInfo(HtmlTag.vertical_columns, 2, new { &#64;class="styled_list" };

  &#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
                        x => x.AvailableCities,
                        x => x.Id,
                        x => x.Name,
                        x => x.SelectedCities,
                        new { &#64;class="styled_checkbox" },      // additional html attributes (for each checkbox and label)
                        htmlListInfo),                         // formatting
                        new[] {"3", "5", "7"},                 // disabled values
                        x => x.Tags)                           // html tags from database
&#125;
</pre>
  </p>
</section>


<section>
	<title>Right-to-left Checkbox/Label direction (e.g. for Arabic, Hebrew and other right-to-left languages)</title>
  <p>
	  <label>Output:</label>
	  @using (Html.BeginForm("Examples", "Home", FormMethod.Get)) {
		  <div style="width: 150px;margin: 5px 0;">
			  @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
														  x => x.AvailableCities,
														  x => x.Id,
														  x => x.Name,
														  x => x.SelectedCities,
                              Position.Vertical_RightToLeft)
		  </div>
		  <input class="green" type="submit" value="POST to controller" />
	  }
	</p>

  <p>
	  <label>Source Code:</label>
<pre>
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,  // checkbox list name, 'PostedCities.CityIDs' in this case
                      x => x.AvailableCities,          
                      x => x.Id,               
                      x => x.Name,               
                      x => x.SelectedCities,
                      Position.Vertical_RightToLeft)
</pre>
  </p>
  
  <p>
	  <label>Or same vertical layout, but using 'HtmlListInfo' instead of 'Position':</label>
<pre>
&#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,  // checkbox list name, 'PostedCities.CityIDs' in this case
                      x => x.AvailableCities,          
                      x => x.Id,               
                      x => x.Name,               
                      x => x.SelectedCities,
                      new HtmlListInfo(HtmlTag.vertical_columns, 0, null, TextLayout.RightToLeft))
</pre>
  </p>
</section>


<section>
	<title>Right-to-left Checkbox/Label direction - Full Example</title>
	<p>
    <label>Output:</label>
	  @using (Html.BeginForm("Examples", "Home", FormMethod.Get)) {
      {
        var htmlListInfo = new HtmlListInfo(HtmlTag.vertical_columns, 2, new {@class = "styled_list"}, TextLayout.RightToLeft);
        
        @Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
                              x => x.AvailableCities,
                              x => x.Id,
                              x => x.Name,
                              x => x.SelectedCities,
                              new {@class = "styled_checkbox"},
                              htmlListInfo,
                              new[] {"3", "5", "7"},
                              x => x.Tags)
      }
      <p><input class="green" type="submit" value="POST to controller" /></p>
   }
	</p>	

	<p>
    <label>Source Code:</label><br/><br/>
    <em>
      We have used same styles as in 'Full Example' -
      'styled_list' and 'styled_checkbox' and we 
      applied them below:
    </em>
<pre class="cs">
&#64;&#123;
  var htmlListInfo = new HtmlListInfo(HtmlTag.vertical_columns, 2, new {&#64;class = "styled_list"}, TextLayout.RightToLeft);

  &#64;Html.CheckBoxListFor(x => x.PostedCities.CityIDs,
                        x => x.AvailableCities,
                        x => x.Id,
                        x => x.Name,
                        x => x.SelectedCities,
                        new { &#64;class="styled_checkbox" },       // additional html attributes
                        htmlListInfo,                           // formatting
                        new[] {"3", "5", "7"},                  // disabled values
                        x => x.Tags)                            // html tags from database
&#125
</pre>
  </p>
</section>


<h4 class="col_12 center">For more information and discussion see</h4>

<div class="col_12 center">
  <a href="@ViewBag.CodePrejectUrl" class="button large pop">
    <span class="icon" data-icon="?"></span>
    Extension's Article on CodeProject.com
  </a>
</div>

</div>

@* jquery test area *@
@section Scripts {
  <script type="text/javascript">
    $(document).ready(function () {
      $('.custom_tags [what="smallCity"]').css("color", "blue");
      $('.custom_tags [what="bigCity"]').css("color", "green");
    });
  </script>  
}